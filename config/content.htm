<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gunplot_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
// width 3: height 2
int width = 1200;
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("./roc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
int center_x = (int)(width/4);
int center_y = (int)(height/4);
int sun_radius = (int)(width/8);

// Colors for the flag
red = gdImageColorAllocate(img, 242, 0, 0); // Red color
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

// 繪製紅色矩形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);

// 繪製藍色矩形區域
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

// 繪製太陽
draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
float angle = 0;
int numRays = 12; // 光芒的數量

gdPoint points[3]; // 三個頂點的陣列

for (int i = 0; i &lt; numRays; i++) {
angle = i * (2 * M_PI / numRays);
float x1 = center_x + cos(angle) * sun_radius;
float y1 = center_y + sin(angle) * sun_radius;

// 調整兩個底邊頂點的位置
float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

// 設定多邊形的三個頂點
points[0].x = (int)x1;
points[0].y = (int)y1;
points[1].x = (int)x2;
points[1].y = (int)y2;
points[2].x = (int)x3;
points[2].y = (int)y3;

gdImageFilledPolygon(img, points, 3, white);
}
//外圈
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

// 繪製太陽內部
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}

</pre>
<p><img caption="false" height="200" src="/images/roc_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
int width = 800;
int height = (int)(width / 1.9);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_usa_flag(img);

FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时出错。\n");
return 1;
}

gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);

return 0;
}

void draw_usa_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 国旗颜色
red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

int stripe_height = height / 13;
int stripe_width = width;
int star_size = (int)(0.0308 * height); // 星星大小

for (int y = 0; y &lt; height; y += stripe_height) {
if (y / stripe_height % 2 == 0) {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
} else {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
}
}

gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
int star_start_x = (int)(0.125 * height); // 星星的起始X位置
int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

for (int row = 0; row &lt; 9; row++) {
int starsPerRow = (row % 2 == 0) ? 6 : 5;

// 计算2、4、6和8排星星的偏移量
int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

for (int star = 0; star &lt; starsPerRow; star++) {
int x = star_start_x + star * star_spacing_x + offset_x;

// 旋转角度（以弧度为单位）
double rotation_angle = M_PI / 5; // 忘記多少度的旋转

int y = star_start_y + row * star_spacing_y;
draw_star(img, x, y, star_size, white, rotation_angle);
}
}
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];

for (int i = 0; i &lt; 10; i++) {
double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
int radius = (i % 2 == 0) ? size : size / 2;
points[i].x = x + radius * cos(angle);
points[i].y = y + radius * sin(angle);
}

// 用指定的颜色填充星星
gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><br/><img caption="false" height="158" src="/images/usa_flag.png" width="300"/></p>
<h1>w7</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_chinese_flag(gdImagePtr img);
 
int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度
 
    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);
 
    draw_chinese_flag(im);
 
    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }
 
    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}
 
// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);
 
void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;
 
    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星
 
    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);
 
    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);
 
    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);
 
    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);
 
    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}
 
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];
 
    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;
 
    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }
 
    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p><img alt="" height="200" src="/images/proc_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_japan_flag(img);
 
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    
 
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
 
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="200" src="/images/japan_flag.png" width="300"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
 
int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;
 
    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    // 绘制英国国旗
    draw_uk_flag(img);
 
    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
 
 
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
 
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色
 
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
 
 
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
 
    int x1, y1, x2, y2, x3, y3;
 
    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
 
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
 
     
    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
 
  int x1, y1, x2, y2, x3, y3;
   
  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
   
   
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
     
   
  }
   
    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
 
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
 
    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}
</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"
 
int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;
 
    im = gdImageCreate(WIDTH, HEIGHT);
 
    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);
 
    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);
 
    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);
 
    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);
 
  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);
 
  int circleX2 = 515;    // 圓心的 X 座標
   
 int circleY2 = 337.5;
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
   
  {
     
   
  // 起點和終點位置
   
  int startX = 340;    
  // 線的起點 X 座標
   
  int startY = 90;   
  // 線的起點 Y 座標
   
  int endX = 200;     
  // 線的終點 X 座標
   
  int endY = 260;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 270;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 210;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);
 
  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
   
  int startX = 330;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 190;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
 
  {
    // 起點和終點位置
   
  int startX = 564;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 704;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
     
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
     
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
     
  int startX2 = 553;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 633;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
   
  int startX = 330;    
  // 線的起點 X 座標
   
  int startY = 520;   
  // 線的起點 Y 座標
   
  int endX = 190;     
  // 線的終點 X 座標
   
  int endY = 350;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;    
  // 線的起點 X 座標
 
  int startY2 = 330;   
  // 線的起點 Y 座標
 
  int endX2 = 133;     
  // 線的終點 X 座標
 
  int endY2 = 390;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
  {
    // 起點和終點位置
   
  int startX = 564;    
  // 線的起點 X 座標
   
  int startY = 97;   
  // 線的起點 Y 座標
   
  int endX = 704;     
  // 線的終點 X 座標
   
  int endY = 267;     
  // 線的終點 Y 座標
  
  int lineWidth = 23;  // 線的寬度
     
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
     
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
     
  int startX2 = 553;    
  // 線的起點 X 座標
 
  int startY2 = 277;   
  // 線的起點 Y 座標
 
  int endX2 = 633;     
  // 線的終點 X 座標
 
  int endY2 = 217;     
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);
 
    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);
 
  }
   
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }
</pre>
<p><img alt="" height="200" src="/images/korea_flag.png" width="300"/></p>
<h1>w10-11</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
int main() {
    int width = 800;
    int height = 600;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
 
fprintf(stderr, "Error opening the output file.\n");
 
return 1;
    }
 
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);
 
    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);
 
    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/hellogd.png" width="267"/></p>
<h1>w12-13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
 
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
 
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
 
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
 
        t += dt;
    }
 
    // Close the data file
    fclose(outputFile);
 
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
 
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>w15</h1>
<p>第一題：</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
 
int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);
 
}
 
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    printf("%d,%d\n",ax, ay);
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    printf("A coord: (%d,%d)\n", points[0].x, points[0].y);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    printf("B coord: (%d,%d)\n", points[1].x, points[1].y);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    printf("E coord: (%d,%d)\n", points[2].x, points[2].y);
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    printf("D coord: (%d,%d)\n\n", points[2].x, points[2].y);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p><img alt="" height="200" src="/images/roc_41223219_flag_gd.png" width="300"/></p>
<p>第二題:</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);
void find_intersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr);
 
int main() {
    // Your existing code here
 
    int width = 1200;
    int height = (int)(width * 2.0 / 3.0);
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
 
    find_intersection(375, 70, 264, 179, center_x, center_y, blue_circle_dia / 2);
    find_intersection(264, 179, 224, 329, center_x, center_y, blue_circle_dia / 2);
    find_intersection(224, 329, 224, 329, center_x, center_y, blue_circle_dia / 2);
    find_intersection(224, 329, 375, 70, center_x, center_y, blue_circle_dia / 2);
 
    // Your existing code here
 
    return 0;
}
 
void draw_roc_flag(gdImagePtr img) {
    // Your existing code here
}
 
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // Your existing code here
}
 
void find_intersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr) {
    float m, c, A, B, C, det, t;
 
    m = (float)(y2 - y1) / (x2 - x1);
 
    c = y1 - m * x1;
 
    A = 1 + m * m;
    B = -2 * cx + 2 * m * (c - cy);
    C = cx * cx + (c - cy) * (c - cy) - cr * cr;
 
    det = B * B - 4 * A * C;
 
    if (det &gt;= 0) {
        t = (-B + sqrt(det)) / (2 * A);
        int x = x1 + t * (x2 - x1);
        int y = y1 + t * (y2 - y1);
        printf("Intersection point: (%d, %d)\n", x, y);
    }
 
    t = (-B - sqrt(det)) / (2 * A);
    int x = x1 + t * (x2 - x1);
    int y = y1 + t * (y2 - y1);
    printf("Intersection point: (%d, %d)\n", x, y);
}
</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Intersection point:(-35729,35523)
Intersection point:(-23866,23875)
Intersection point:(-10954,42247)
Intersection point:(-9410,36458)
Intersection point:(-2147483648,-2147483648)
Intersection point:(51899,-88305)
Intersection point:(38970,-66130)</pre>
<h1>w16</h1>
<h4><span style="color: #ff9900;">Q.1</span></h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

#define WIDTH 800
#define HEIGHT 600
#define SCALE 100

//繪製電阻形狀
void drawResistor(gdImagePtr im, int x1, int y, int width, int height) {
    int startX = x1 ;
    int endX = x1 + width ;

    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

  // 向上45度
    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));


  {
    int startX = 100;
  gdImageColorAllocate(im, 0, 0, 255);


    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 }

  {
    int startX = 585;
  gdImageColorAllocate(im, 0, 0, 255);


    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));

    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));

    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));

}
}

int main() {
    gdImagePtr im;
    FILE *outputFile;

    // 創建圖像物件
    im = gdImageCreateTrueColor(WIDTH, HEIGHT);
    if (im == NULL) {
        fprintf(stderr, "Error creating GD image.\n");
        return 1;
    }

    outputFile = fopen("1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    //配置顏色
    int black, white, red, blue, green;

    black = gdImageColorAllocate(im, 0, 0, 0);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 255, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 255);
green = gdImageColorAllocate(im, 0, 255, 0);
    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);

    // 繪製牆面
    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);
    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);

   // 繪製彈簧(電阻)
    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);

    // 繪製質量（方形）
    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);

  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);


    //生成圖片
    gdImagePng(im, outputFile);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}</pre>
<p><br/><img alt="" height="263" src="/images/w16_q1.png" width="350"/><br/><br/></p>
<h4><span style="color: #ff9900;">Q.2</span></h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// System parameters
#define M1 2.0
#define M2 3.0
#define K1 0.5
#define K2 1.0
#define K3 15.0
#define C1 0.25
#define C2 0.33
#define C3 0.5

// Function to calculate the derivative of the state
void calculate_derivative(double t, double state[4], double derivative[4]) {
    derivative[0] = state[2];  // dx1/dt = v1
    derivative[1] = state[3];  // dx2/dt = v2

    double delta_x = state[0] - state[1];

    // dv1/dt
    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;

    // dv2/dt
    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;
}

// Euler's Method for solving the system
void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {
    FILE *output_file;
    output_file = fopen("trajectory_data.txt", "w");

    double t = t_initial;
    double state[4];
    for (int i = 0; i &lt; 4; ++i) {
        state[i] = initial_conditions[i];
    }

    while (t &lt;= t_final) {
        fprintf(output_file, "%f %f %f %f %f\n", t, state[0], state[1], state[2], state[3]);

        double derivative[4];
        calculate_derivative(t, state, derivative);

        for (int i = 0; i &lt; 4; ++i) {
            state[i] += derivative[i] * dt;
        }

        t += dt;
    }

    fclose(output_file);
}

int main() {
    // Define the initial conditions
    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2

    // Time parameters
    double t_initial = 0.0;
    double t_final = 10.0;
    double dt = 0.01;

    // Solve the system using Euler's Method
    euler_method(t_initial, t_final, dt, initial_conditions);

    return 0;
}</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
  
int main() {
    FILE *gnuplotPipe = popen("gnuplot", "w");
    if (gnuplotPipe) {
        fprintf(gnuplotPipe, "set terminal png\n");
        fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
        fprintf(gnuplotPipe, "set xlabel 'Time'\n");
        fprintf(gnuplotPipe, "set ylabel 'Position / Velocity'\n");
        fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines title 'm1 position', 'motion_data.txt' using 1:3 with lines title 'm2 position', 'motion_data.txt' using 1:4 with lines title 'm1 velocity', 'motion_data.txt' using 1:5 with lines title 'm2 velocity'\n");
        fprintf(gnuplotPipe, "exit\n");
        fflush(gnuplotPipe);
        pclose(gnuplotPipe);
    } else {
        printf("Error opening pipe to Gnuplot.\n");
    }
    return 0;
}</pre>
<p><span style="color: #000000;"><img alt="" height="263" src="/images/motion_plot.png" width="350"/><br/><br/></span></p>
<h1>ANSIC</h1>
<h2><strong>課堂內容</strong></h2>
<p><span>1.</span><span>寫一個 C 程序，接受兩個商品的重量和購買數量（浮點值）併計算它們的平均值</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() 
{
    double wi1, ci1, wi2, ci2, result; // 宣告變數表示重量和數量

    // 提示使用者輸入 item 1 的重量
    printf("Weight - Item1: ");
    if (scanf("%lf", &amp;wi1) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }

    // 提示使用者輸入 item 1 的數量
    printf("No. of item1: ");
    if (scanf("%lf", &amp;ci1) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }

    // 提示使用者輸入 item 2 的重量
    printf("Weight - Item2: ");
    if (scanf("%lf", &amp;wi2) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }

    // 提示使用者輸入 item 2 的數量
    printf("No. of item2: ");
    if (scanf("%lf", &amp;ci2) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }

    // 計算平均值
    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);

    // 輸出平均值
    printf("Average Value = %f\n", result);

    return 0; // 返回零表示程式正常結束
}</pre>
<p><strong><img alt="" height="135" src="/images/cp01.png" width="450"/></strong></p>
<p>2.寫一個 C 程序，接受員工的 ID、一個月的總工作時間、他每小時收到的金額</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    char id[10];         // 宣告變數表示員工ID（最多10個字元）
    int hour;            // 宣告變數表示工作時數
    double value, salary; // 宣告變數表示每小時薪水和總薪水

    // 使用一個變數存儲 scanf 的返回值以避免警告
    int result;

    // 提示用戶輸入員工ID
    printf("Input the Employees ID(Max. 10 chars): ");
    result = scanf("%9s", id); // 讀取並檢查輸入的ID，限制最多讀取9個字元

    if (result != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid Employee ID.\n");
        return 1; // 返回1表示出錯
    }

    // ... 以下略，後續的程式碼保持不變 ...

    return 0; // 返回0表示程式正常結束
}</pre>
<p><strong><img alt="" height="168" src="/images/cp02.png" width="450"/></strong></p>
<p>3.寫一個 C 程序，接受三個整數並找出三個整數中的最大值</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
    int x, y, z, result, max; // 宣告變數

    // 提示用戶輸入第一個整數並存儲在 'x' 中
    printf("\nInput the first integer: ");
    if (scanf("%d", &amp;x) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }

    // 提示用戶輸入第二個整數並存儲在 'y' 中
    printf("\nInput the second integer: ");
    if (scanf("%d", &amp;y) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }

    // 提示用戶輸入第三個整數並存儲在 'z' 中
    printf("\nInput the third integer: ");
    if (scanf("%d", &amp;z) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }

    // 計算結果
    result = (x + y + abs(x - y)) / 2;

    // 計算最大值
    max = (result + z + abs(result - z)) / 2;

    // 輸出最大值
    printf("\nMaximum value of three integers: %d\n", max);

    return 0; // 返回0表示程式正常結束
}</pre>
<p><span><img alt="" height="203" src="/images/cp03.png" width="450"/></span></p>
<p><span>4.</span><span>寫一個 C 程序，根據給定的總行駛距離（整數值）（以公里為單位）和用過的燃料（以公升為單位，浮點數 - 2 位小數）計算自行車的平均消耗量</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() 
{
    int x;    // 用來儲存總行駛公里數
    float y;  // 用來儲存總耗油量

    // 提示用戶輸入總行駛公里數並存儲在 'x' 中
    printf("Input total distance in km: ");
    if (scanf("%d", &amp;x) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }

    // 提示用戶輸入總耗油量並存儲在 'y' 中
    printf("Input total fuel spent in liters: ");
    if (scanf("%f", &amp;y) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid float number.\n");
        return 1; // 返回1表示出錯
    }

    // 檢查總耗油量是否為0，以避免除以0的情況
    if (y == 0) {
        printf("Error: Total fuel spent cannot be zero.\n");
        return 1; // 返回1表示出錯
    }

    // 計算並輸出平均油耗
    printf("Average consumption (km/lt): %.3f\n", x / y);

    return 0; // 返回0表示程式正常結束
}</pre>
<p><span><img alt="" height="145" src="/images/cp04.png" width="450"/><br/></span></p>
<p><span>5.<span>用 C 語言寫一個程序，使用函數求任意數字的平方</span></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

double square(double num) {
    return (num * num);
}

int main() {
    int num;
    double n;
    int scanfResult; // 變數用於儲存 scanf 的返回值

    printf("\n\n 函式：計算任意數字的平方值 :\n");
    printf("------------------------------------------------\n");

    printf("輸入任意數字以計算平方值：");
    scanfResult = scanf("%d", &amp;num); // 將 scanf 的返回值儲存在變數中

    if (scanfResult != 1) {
        printf("輸入錯誤或無效的數字。\n");
        return 1; // 適當的錯誤處理
    }

    n = square(num);
    printf("%d 的平方是：%.2f\n", num, n);

    return 0;
}</pre>
<p><span><span><img alt="" height="185" src="/images/cp05.png" width="450"/><br/></span></span></p>
<p><span><span>6.<span>用 C 語言寫一個程序，使用函數交換兩個數字</span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

void swap(int *, int *);

int main() {
    int n1, n2;
    int scanfResult1, scanfResult2; // 儲存 scanf 函式的返回值

    printf("\n\n 函式 : 使用函式交換兩個數字 :\n");
    printf("------------------------------------------------\n");

    printf("輸入第一個數字 : ");
    scanfResult1 = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值

    printf("輸入第二個數字 : ");
    scanfResult2 = scanf("%d", &amp;n2); // 儲存 scanf 函式的返回值

    // 檢查 scanf 的返回值
    if (scanfResult1 != 1 || scanfResult2 != 1) {
        printf("錯誤的輸入。\n");
        return 1; // 適當的錯誤處理
    }

    printf("交換前 : n1 = %d, n2 = %d ", n1, n2);
    swap(&amp;n1, &amp;n2);
    printf("\n交換後 : n1 = %d, n2 = %d \n\n", n1, n2);

    return 0;
}

void swap(int *p, int *q) {
    int tmp;
    tmp = *p;
    *p = *q;
    *q = tmp;
}</pre>
<p><span><span><span><img alt="" height="225" src="/images/cp06.png" width="450"/><br/></span></span></span></p>
<p><span><span><span>7.<span>使用函數檢查給定數字是偶數還是奇數</span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int checkOddEven(int n1)
{   
    return (n1 &amp; 1);
}

int main()
{
    int n1;
    int scanfResult; // 儲存 scanf 函式的返回值

    printf("\n\n 函式：檢查數字是奇數還是偶數：\n");
    printf("------------------------------------------------\n");

    printf("輸入任意數字：");
    scanfResult = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值

    if (scanfResult != 1) {
        printf("無效的輸入。\n");
        return 1; // 適當的錯誤處理
    }

    if(checkOddEven(n1))
    {
        printf("輸入的數字是奇數。\n\n");
    }
    else
    {
        printf("輸入的數字是偶數。\n\n");
    }
    return 0;
}</pre>
<p><span><span><span><span><img alt="" height="196" src="/images/cp07.png" width="450"/><br/></span></span></span></span></p>
<p><span><span><span><span>8.<span>使用函數求 1!/1+2!/2+3!/3+4!/4+5!/5 數列的和</span></span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int fact(int);

int main() {
    int sum;
    // 計算數列總和：1!/1 + 2!/2 + 3!/3 + 4!/4 + 5!/5
    sum = fact(1) / 1 + fact(2) / 2 + fact(3) / 3 + fact(4) / 4 + fact(5) / 5;

    printf("\n\n 函式：計算數列 1!/1 + 2!/2 + 3!/3 + 4!/4 + 5!/5 的總和 :\n");
    printf("----------------------------------------------------------\n");

    printf("數列總和為 : %d\n\n", sum);
    return 0;
}

// 計算階乘的函式
int fact(int n) {
    int num = 0, f = 1;

    // 計算階乘
    while (num &lt;= n - 1) {
        f = f + f * num; // 這裡的階乘計算方式可能不正確
        num++;
    }
    return f;
}</pre>
<p><span><span><span><span><span><img alt="" height="189" src="/images/cp08.png" width="450"/><br/></span></span></span></span></span></p>
<p><span><span><span><span><span>9.<span>使用函數將十進制數轉換為二進制數</span></span></span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;

long toBin(int);

int main()
{
    long bno;
    int dno;
    int scanfResult; // 儲存 scanf 函式的返回值

    printf("\n\n 函式 : 十進制轉二進制 :\n");
    printf("-------------------------------------------\n");
    printf(" 輸入任意十進制數字 : ");

    scanfResult = scanf("%d", &amp;dno); // 儲存 scanf 函式的返回值

    if (scanfResult != 1) {
        printf("輸入錯誤或無效的數字。\n");
        return 1; // 適當的錯誤處理
    }

    bno = toBin(dno);
    printf("\n 二進制值為 : %ld\n\n", bno);

    return 0;
}

long toBin(int dno)
{
    long bno = 0, remainder, f = 1;
    while(dno != 0)
    {
        remainder = dno % 2;
        bno = bno + remainder * f;
        f = f * 10;
        dno = dno / 2;
    }
    return bno;
}</pre>
<p><span><span><span><span><span><span><img alt="" height="202" src="/images/cp09.png" width="450"/><br/></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span>10.<span>使用函數檢查一個數是否為質數</span></span></span></span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int PrimeOrNot(int);

int main() {
    int n1, prime;
    int scanfResult; // 儲存 scanf 函式的返回值

    printf("\n\n 函式 : 檢查一個數字是否為質數 :\n");
    printf("---------------------------------------------------------------\n");

    printf(" 輸入一個正數 : ");
    scanfResult = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值

    // 檢查 scanf 的返回值以確保成功讀取一個整數
    if (scanfResult != 1) {
        printf("輸入無效。\n");
        return 1; // 適當的錯誤處理
    }

    prime = PrimeOrNot(n1);

    if (prime == 1)
        printf(" 數字 %d 是質數。\n", n1);
    else
        printf(" 數字 %d 不是質數。\n", n1);

    return 0;
}

int PrimeOrNot(int n1) {
    int i = 2;
    while (i &lt;= n1 / 2) {
        if (n1 % i == 0)
            return 0; // 若能被除了1和自身以外的數整除，則不是質數
        else
            i++;
    }
    return 1; // 若無法被其他數整除，則是質數
}</pre>
<p><span><span><span><span><span><span><span><img alt="" height="203" src="/images/cp10.png" width="450"/><br/></span></span></span></span></span></span></span></p>
<h2><strong>EX_2</strong></h2>
<p><span>1.編寫一個 C 程式來列印您的姓名、出生日期和手機號碼</span></p>
<p><span></span></p>
<p><span>2.<span>編寫一個C 程式來取得您正在使用的C 版本</span></span></p>
<p><span><span></span></span></p>
<p><span><span>3.<span>寫一個 C 程序，使用哈希 (#) 列印一個區塊 F，其中 F 的高度為 6 個字符，寬度為 5 個和 4 個字符。</span><span>並且還列印一個非常大的“C”</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span><span>4.<span>寫一個C 程序，反向列印下列字元</span></span></span></span></p>
<p><span><span><span><span></span></span></span></span></p>
<p><span><span><span><span>5.<span>寫一個 C 程式來計算高 7 英吋、寬 5 英吋的矩形的周長和面積</span></span></span></span></span></p>
<p><span><span><span><span><span></span></span></span></span></span></p>
<p><span><span><span><span><span>6.<span>寫一個 C 程式來計算給定半徑的圓的周長和面積</span></span></span></span></span></span></p>
<p><span><span><span><span><span><span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span>7.<span>寫一個C 程式來顯示多個變數</span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span>8.<span>編寫一個 C 程序，將指定的日期轉換為年、週和日</span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span>9.<span>寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的和</span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span><span></span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span><span>10.<span>寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的乘積</span></span></span></span></span></span></span></span></span></span></p>
<p><span><span><span><span><span><span><span><span><span><span></span></span></span></span></span></span></span></span></span></span></p>
<h1>C_ex</h1>
<h2>Class 1</h2>
<h3><span style="color: #ff9900;">Q.1</span></h3>
<p><span style="color: #000000;"></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    int i;

    // 提示用户输入一个整数
    printf("100：");

    // 读取用户输入的整数
    scanf("%d", &amp;i);

    // 判断输入的整数，并输出相应的消息
    if (i &lt; 100)
    {
        printf("i &lt; 100\n");
    }
    else
    {
        if ((i &gt;= 100) &amp;&amp; (i &lt; 200))
        {
            printf("i &gt;= 100 且 i &lt; 200\n");
        }
        else
        {
            printf("i &gt;= 200\n");
        }
    }
}</pre>
<p><img caption="false" height="179" src="/images/螢幕擷取畫面 2024-01-11 010644.png" width="500"/></p>
<h3><span style="color: #ff9900;">Q.2</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 64;
    int b = 0x40; // 以十六進制表示
    long c = 64L;

    // 打印變量的質
    printf("%d, %d, %ld", a, b, c);

    return 0;
}</pre>
<p><span><img alt="" height="77" src="/images/q2.png" width="400"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.3</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;

/* 輸出 a, b, c 到螢幕 */
printf("a = %3.1f, b = %3.1f, c = %d\n", a, b, c);

return 0;
}</pre>
<p><span><img caption="false" height="252" src="/images/q3.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.4</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   字元範例 1
   ==================== */
#include &lt;stdio.h&gt;

int main()
{
    char x, y;

    x = 'a';
    y = (char)97;

    /* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
    printf("x = %c, y = %c, ASCII of y = %d", x, y, y);

    return 0;
}
</pre>
<p><span><img alt="" height="66" src="/images/螢幕擷取畫面 2024-01-11 022613.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.5</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
計算長方形面積, 需傳入長與寬.
==================== */
int rect(int x, int y)
{
    int result;
    result = x * y;
    return result; /* 返回 result */
}

/* ====================
主函數
==================== */
int main()
{
    int x = 8, y = 4;
    int a;
    a = rect(x, y);
    printf("8*4 的面積是 %d", a);
    return 0;
}</pre>
<p><span><img alt="" height="91" src="/images/q5.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.6</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
int a;

// 第一次輸出
a = 3;
printf("%d\n", !a); // 邏輯非運算，a為真，所以輸出0

// 第二次輸出
a = 0;
printf("%d\n", !a); // 邏輯非運算，a為假，所以輸出1
}</pre>
<p><span><img alt="" height="122" src="/images/q6.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.7</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    char a;

    // 使用 %zu 格式說明符輸出 size_t 類型
    printf("The size of int is %zu\n", sizeof(int));

    // 使用 %zu 格式說明符輸出 size_t 類型
    printf("The size of char a is %zu\n", sizeof(a));
}</pre>
<p><span><img alt="" height="127" src="/images/q7.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.8</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 10, b = 5;

    // 第一組比較
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    printf("\n");

    // 修改 b 的值
    b = 10;

    // 第二組比較
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    return 0;
}</pre>
<p><span><br/></span><img alt="" height="275" src="/images/q8.png" width="450"/></p>
<h3><span style="color: #ff9900;">Q.9</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
float circle( int r ); /* 宣告 circle 的 prototype */
void main()
{
float answer;
answer = circle(8);
printf( " 圓周長度是 %f", answer );
}
/* ====================
 circle 函數, 計算 circle 的圓周長
==================== */
float circle( int r )
{
float result;
result = 3.14159 * (double)1001 * r;
return ( result );
}
</pre>
<p><span><img alt="" height="109" src="/images/q9.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">Q.10</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    char ch;

    printf("輸入一个字符：");

    // 檢查 scanf 的返回值，確保成功讀取一個字符
    if (scanf(" %c", &amp;ch) != 1) {
        printf("讀取字符失敗\n");
        return 1; //  或者採取其他錯誤處理措施
    }

    if (ch == 'a') {
        printf("按下了 'a'\n");
    }

    return 0;
}</pre>
<p><span><img alt="" height="157" src="/images/q10.png" width="450"/><br/></span></p>
<h2>EX_1</h2>
<h3><span style="color: #ff9900;">課外練習1.</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
99 乘法.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int x, y;

    for (x = 1; x &lt;= 9; x++)
    {
        for (y = 1; y &lt;= 9; y++)
        {
            printf("%2d ", x * y);  /* 使用 %2d 以確保數字的對齊性 */
        }
        printf("\n");
    }

    return 0;
}
</pre>
<p><img alt="" height="235" src="/images/cp1.png" width="450"/><br/><br/></p>
<h3><span style="color: #ff9900;">課外練習2.</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 Program "continue"
 ==================== */
#include &lt;stdio.h&gt;

int main()
{
    int i;

    for (i = 0; i &lt; 10; i++)
    {
        if ((i == 1) || (i == 2) || (i == 3))
        {
            continue; /* 忽略以後的 program, 回到 for. */
        }
        printf("i = %d\n", i);
    }

    return 0;
}</pre>
<p><span><img alt="" height="195" src="/images/cp2.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">課外練習3.</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 2d array.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int array[3][3];
    int x, y;

    array[0][0] = 1;
    array[0][1] = 2;
    array[0][2] = 3;
    array[1][0] = 4;
    array[1][1] = 5;
    array[1][2] = 6;
    array[2][0] = 7;
    array[2][1] = 8;
    array[2][2] = 9;

    for (x = 0; x &lt; 3; x++)
    {
        for (y = 0; y &lt; 3; y++)
        {
            printf("%d,", array[x][y]);
        }
    }

    return 0;
}
</pre>
<p><span><img alt="" height="123" src="/images/cp3.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">課外練習4.</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 #define 的範例 2.
========================= */
#include &lt;stdio.h&gt;

#define TRUE 1
#define FALSE 0
#define BOOL int

/* ====================
如果傳入值大於 10, 則傳回 TRUE
==================== */
BOOL is_greater_than_10(int i)
{
    if (i &gt; 10)
        return TRUE;
    else
        return FALSE;
}

/* ====================
 main function.
==================== */
int main()
{
    int i;
    BOOL result;

    printf("Input a number: ");

    // 檢查 scanf 的返回值
    if (scanf("%d", &amp;i) != 1) {
        printf("Error reading input.\n");
        return 1;  // 返回非零值表示錯誤
    }

    result = is_greater_than_10(i);

    if (result == TRUE)
        printf("Greater than 10!\n"); /* 大於 10 */
    else
        printf("Not greater than 10!\n"); /* 不大於 10 */

    return 0;
}
</pre>
<p><span><img alt="" height="142" src="/images/cp4.png" width="450"/><br/></span></p>
<h3><span style="color: #ff9900;">課外練習5.</span></h3>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 &amp; operator.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int *pointer_a, a;
    pointer_a = &amp;a;
    a = 10;

    printf("%d, %d\n", a, *pointer_a);

    return 0;
}</pre>
<p><strong><img alt="" height="117" src="/images/cp5.png" width="450"/><br/></strong></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>